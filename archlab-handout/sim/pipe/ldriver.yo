                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4a806000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f62804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f72002000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # This is written by Xinrui Hua, xh3426
                            | #
                            | # Describe how and why you modified the baseline code.
                            | # Use iaddq
                            | # Decrease Data Hazard
                            | # Loop unrollling, divide loops into several 4-loops and residual
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax, %rax		# count = 0;
0x034: c0f2fdffffffffffffff | 	iaddq $-3, %rdx     # len -= 3;
0x03e: 764501000000000000   | 	jg Loop0		    # if so, goto loop to decrease length to less than 4:
0x047:                      | Restore:
0x047: c0f20300000000000000 | 	iaddq $3, %rdx      # restore 3
0x051:                      | Residual0:
0x051: 765b00000000000000   | 	jg Residual1        # if length > 0, do residual
0x05a: 90                   | 	ret
0x05b:                      | Residual1:
0x05b: 50a70000000000000000 | 	mrmovq (%rdi), %r10 
0x065: c0f70800000000000000 | 	iaddq $8, %rdi      # src++
0x06f: 62aa                 | 	andq %r10, %r10
0x071: 718400000000000000   | 	jle Residual2
0x07a: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x084:                      | Residual2:
0x084: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x08e: c0f60800000000000000 | 	iaddq $8, %rsi      # dst++
0x098: c0f2ffffffffffffffff | 	iaddq $-1, %rdx     # len--
0x0a2: 76ac00000000000000   | 	jg Residual3
0x0ab: 90                   | 	ret
0x0ac:                      | Residual3:
0x0ac: 50a70000000000000000 | 	mrmovq (%rdi), %r10 
0x0b6: c0f70800000000000000 | 	iaddq $8, %rdi      # src++
0x0c0: 62aa                 | 	andq %r10, %r10
0x0c2: 71d500000000000000   | 	jle Residual4
0x0cb: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0d5:                      | Residual4:
0x0d5: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x0df: c0f60800000000000000 | 	iaddq $8, %rsi      # dst++
0x0e9: c0f2ffffffffffffffff | 	iaddq $-1, %rdx     # len--
0x0f3: 76fd00000000000000   | 	jg Residual5
0x0fc: 90                   | 	ret
0x0fd:                      | Residual5:
0x0fd: 50a70000000000000000 | 	mrmovq (%rdi), %r10 
0x107: c0f70800000000000000 | 	iaddq $8, %rdi      # src++
0x111: 62aa                 | 	andq %r10, %r10
0x113: 712601000000000000   | 	jle Residual6
0x11c: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x126:                      | Residual6:
0x126: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x130: c0f60800000000000000 | 	iaddq $8, %rsi      # dst++
0x13a: c0f2ffffffffffffffff | 	iaddq $-1, %rdx     # len--
0x144: 90                   | 	ret
0x145:                      | Loop0:
0x145: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x14f: c0f72000000000000000 | 	iaddq $32, %rdi     # src += 4
0x159: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x163: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x165: 717801000000000000   | 	jle Loop1		    # if so, goto Loop1:
0x16e: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x178:                      | Loop1:	
0x178: 50a7e8ffffffffffffff | 	mrmovq -24(%rdi), %r10	# read val from src...
0x182: c0f62000000000000000 | 	iaddq $32, %rsi     # dst += 4
0x18c: 40a6e8ffffffffffffff | 	rmmovq %r10, -24(%rsi)	# ...and store it to dst
0x196: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x198: 50a7f0ffffffffffffff | 	mrmovq -16(%rdi), %r10	# read val from src...
0x1a2: 71b501000000000000   | 	jle Loop2		    # if so, goto Loop2:
0x1ab: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x1b5:                      | Loop2:	
0x1b5: 40a6f0ffffffffffffff | 	rmmovq %r10, -16(%rsi)	# ...and store it to dst
0x1bf: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x1c1: 50a7f8ffffffffffffff | 	mrmovq -8(%rdi), %r10	# read val from src...
0x1cb: 71de01000000000000   | 	jle Loop3		    # if so, goto Loop3:
0x1d4: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x1de:                      | Loop3:	
0x1de: 40a6f8ffffffffffffff | 	rmmovq %r10, -8(%rsi)	# ...and store it to dst
0x1e8: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x1ea: 71fd01000000000000   | 	jle Loop4		    # if so, goto Loop4:
0x1f3: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x1fd:                      | Loop4:
0x1fd: c0f2fcffffffffffffff | 	iaddq $-4, %rdx     # length -= 4
0x207: 764501000000000000   | 	jg Loop0            # if length > 0, goto next loop
0x210: 704700000000000000   | 	jmp Restore         # restore 3 and do residual
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x219:                      | Done:
0x219: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x21a:                      | End:
                            | #/* $end ncopy-ys */
0x21a:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x220:                      | 	.align 8
0x220:                      | src:
0x220: ffffffffffffffff     | 	.quad -1
0x228: 0200000000000000     | 	.quad 2
0x230: 0300000000000000     | 	.quad 3
0x238: fcffffffffffffff     | 	.quad -4
0x240: 0500000000000000     | 	.quad 5
0x248: faffffffffffffff     | 	.quad -6
0x250: 0700000000000000     | 	.quad 7
0x258: f8ffffffffffffff     | 	.quad -8
0x260: f7ffffffffffffff     | 	.quad -9
0x268: 0a00000000000000     | 	.quad 10
0x270: f5ffffffffffffff     | 	.quad -11
0x278: f4ffffffffffffff     | 	.quad -12
0x280: 0d00000000000000     | 	.quad 13
0x288: 0e00000000000000     | 	.quad 14
0x290: f1ffffffffffffff     | 	.quad -15
0x298: 1000000000000000     | 	.quad 16
0x2a0: efffffffffffffff     | 	.quad -17
0x2a8: 1200000000000000     | 	.quad 18
0x2b0: edffffffffffffff     | 	.quad -19
0x2b8: ecffffffffffffff     | 	.quad -20
0x2c0: ebffffffffffffff     | 	.quad -21
0x2c8: eaffffffffffffff     | 	.quad -22
0x2d0: 1700000000000000     | 	.quad 23
0x2d8: 1800000000000000     | 	.quad 24
0x2e0: e7ffffffffffffff     | 	.quad -25
0x2e8: e6ffffffffffffff     | 	.quad -26
0x2f0: 1b00000000000000     | 	.quad 27
0x2f8: 1c00000000000000     | 	.quad 28
0x300: e3ffffffffffffff     | 	.quad -29
0x308: e2ffffffffffffff     | 	.quad -30
0x310: 1f00000000000000     | 	.quad 31
0x318: e0ffffffffffffff     | 	.quad -32
0x320: dfffffffffffffff     | 	.quad -33
0x328: deffffffffffffff     | 	.quad -34
0x330: 2300000000000000     | 	.quad 35
0x338: 2400000000000000     | 	.quad 36
0x340: 2500000000000000     | 	.quad 37
0x348: daffffffffffffff     | 	.quad -38
0x350: d9ffffffffffffff     | 	.quad -39
0x358: d8ffffffffffffff     | 	.quad -40
0x360: 2900000000000000     | 	.quad 41
0x368: 2a00000000000000     | 	.quad 42
0x370: d5ffffffffffffff     | 	.quad -43
0x378: d4ffffffffffffff     | 	.quad -44
0x380: 2d00000000000000     | 	.quad 45
0x388: d2ffffffffffffff     | 	.quad -46
0x390: 2f00000000000000     | 	.quad 47
0x398: d0ffffffffffffff     | 	.quad -48
0x3a0: cfffffffffffffff     | 	.quad -49
0x3a8: 3200000000000000     | 	.quad 50
0x3b0: cdffffffffffffff     | 	.quad -51
0x3b8: 3400000000000000     | 	.quad 52
0x3c0: 3500000000000000     | 	.quad 53
0x3c8: 3600000000000000     | 	.quad 54
0x3d0: 3700000000000000     | 	.quad 55
0x3d8: c8ffffffffffffff     | 	.quad -56
0x3e0: c7ffffffffffffff     | 	.quad -57
0x3e8: 3a00000000000000     | 	.quad 58
0x3f0: c5ffffffffffffff     | 	.quad -59
0x3f8: 3c00000000000000     | 	.quad 60
0x400: 3d00000000000000     | 	.quad 61
0x408: 3e00000000000000     | 	.quad 62
0x410: 3f00000000000000     | 	.quad 63
0x418: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x420:                      | 	.align 16
0x420:                      | Predest:
0x420: fadebc0000000000     | 	.quad 0xbcdefa
0x428:                      | dest:
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620:                      | Postdest:
0x620: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x628:                      | .align 8
                            | # Run time stack
0x628: 0000000000000000     | 	.quad 0
0x630: 0000000000000000     | 	.quad 0
0x638: 0000000000000000     | 	.quad 0
0x640: 0000000000000000     | 	.quad 0
0x648: 0000000000000000     | 	.quad 0
0x650: 0000000000000000     | 	.quad 0
0x658: 0000000000000000     | 	.quad 0
0x660: 0000000000000000     | 	.quad 0
0x668: 0000000000000000     | 	.quad 0
0x670: 0000000000000000     | 	.quad 0
0x678: 0000000000000000     | 	.quad 0
0x680: 0000000000000000     | 	.quad 0
0x688: 0000000000000000     | 	.quad 0
0x690: 0000000000000000     | 	.quad 0
0x698: 0000000000000000     | 	.quad 0
0x6a0: 0000000000000000     | 	.quad 0
                            | 
0x6a8:                      | Stack:
