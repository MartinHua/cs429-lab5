#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# This is written by Xinrui Hua, xh3426
#
# Describe how and why you modified the baseline code.
# Use iaddq
# Decrease Data Hazard
# Loop unrollling
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax, %rax		# count = 0;
	iaddq $-3, %rdx     # len -= 3;
	jg Loop0		    # if so, goto loop to decrease length to less than 4:
Restore:
	iaddq $3, %rdx      # restore 3
Residual0:
	jg Residual1        # if length > 0, do residual
	ret
Residual1:
	mrmovq (%rdi), %r10 
	iaddq $8, %rdi
	andq %r10, %r10
	jle Residual2
	iaddq $1, %rax		# count++
Residual2:
	rmmovq %r10, (%rsi)
	iaddq $8, %rsi
	iaddq $-1, %rdx
	jg Residual3
	ret
Residual3:
	mrmovq (%rdi), %r10 
	iaddq $8, %rdi
	andq %r10, %r10
	jle Residual4
	iaddq $1, %rax		# count++
Residual4:
	rmmovq %r10, (%rsi)
	iaddq $8, %rsi
	iaddq $-1, %rdx
	jg Residual5
	ret
Residual5:
	mrmovq (%rdi), %r10 
	iaddq $8, %rdi
	andq %r10, %r10
	jle Residual6
	iaddq $1, %rax		# count++
Residual6:
	rmmovq %r10, (%rsi)
	iaddq $8, %rsi
	iaddq $-1, %rdx
	ret
Loop0:
	mrmovq (%rdi), %r10	# read val from src...
	iaddq $32, %rdi     # src += 4
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Loop1		    # if so, goto Loop1:
	iaddq $1, %rax		# count++
Loop1:	
	mrmovq -24(%rdi), %r10	# read val from src...
	iaddq $32, %rsi     # dst += 4
	rmmovq %r10, -24(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	mrmovq -16(%rdi), %r10	# read val from src...
	jle Loop2		    # if so, goto Loop2:
	iaddq $1, %rax		# count++
Loop2:	
	rmmovq %r10, -16(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	mrmovq -8(%rdi), %r10	# read val from src...
	jle Loop3		    # if so, goto Loop3:
	iaddq $1, %rax		# count++
Loop3:	
	rmmovq %r10, -8(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Loop4		    # if so, goto Loop4:
	iaddq $1, %rax		# count++
Loop4:
	iaddq $-4, %rdx     # length -= 4
	jg Loop0            # if length > 0, goto next loop
	jmp Restore         # restore 3 and do residual
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
