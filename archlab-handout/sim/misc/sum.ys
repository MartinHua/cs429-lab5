# This is Part A written by Xinrui Hua, xh3426

# Execution begins at address 0
    .pos 0
    irmovq stack, %rsp
    call main
    halt

# Sample linked list
    .align 8
ele1:
    .quad 0x00a
    .quad ele2
ele2:
    .quad 0x0b0
    .quad ele3
ele3:
    .quad 0xc00
    .quad 0

main:
    irmovq ele1, %rdi
    call sum_list
    ret

# long sum_list(list_ptr ls)
# ls in %rdi
sum_list:
    irmovq $0, %rax
    jmp cond
loop:
    mrmovq (%rdi), %r8
    addq %r8, %rax
    mrmovq 8(%rdi), %r9
    rrmovq %r9, %rdi
cond:
    andq %rdi, %rdi
    jne loop
    ret

# Stack starts here and grows to lower addresses
    .pos 0x400
stack:

