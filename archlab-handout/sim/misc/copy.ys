# This is Part A written by Xinrui Hua, xh3426

# Execution begins at address 0
    .pos 0
    irmovq stack, %rsp
    call main
    halt

    .align 8
# Source block
src:
    .quad 0x00a
    .quad 0x0b0
    .quad 0xc00
# Destination block
dest:
    .quad 0x111
    .quad 0x222
    .quad 0x333

main:
    irmovq src, %rdi
    irmovq dest, %rsi
    irmovq $3, %rdx
    call copy_block
    ret

# long copy_block(long *src, long *dest, long len)
# src in %rdi, dest in %rsi, len in %rdx
copy_block:
    pushq %r12
    pushq %r13
    pushq %r14
    irmovq $0, %rax
    irmovq $1, %r12
    irmovq $8, %r13
    jmp cond
loop:
    subq %r12, %rdx
    mrmovq (%rdi), %r14
    rmmovq %r14, (%rsi)
    addq %r13, %rdi
    addq %r13, %rsi
    xorq %r14, %rax
cond:
    andq %rdx, %rdx
    jg loop
    popq %r14
    popq %r13
    popq %r12
    ret

# Stack starts here and grows to lower addresses
    .pos 0x400
stack:

